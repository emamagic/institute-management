/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { course } from '../fn/course/course';
import { Course$Params } from '../fn/course/course';
import { CourseResponse } from '../models/course-response';
import { courses } from '../fn/course/courses';
import { Courses$Params } from '../fn/course/courses';
import { create1 } from '../fn/course/create-1';
import { Create1$Params } from '../fn/course/create-1';
import { delete1 } from '../fn/course/delete-1';
import { Delete1$Params } from '../fn/course/delete-1';
import { enrollUser } from '../fn/course/enroll-user';
import { EnrollUser$Params } from '../fn/course/enroll-user';
import { PageResponseCourseResponse } from '../models/page-response-course-response';
import { update1 } from '../fn/course/update-1';
import { Update1$Params } from '../fn/course/update-1';
import { UserResponse } from '../models/user-response';
import { usersByCourseId } from '../fn/course/users-by-course-id';
import { UsersByCourseId$Params } from '../fn/course/users-by-course-id';
import { withdrawalUser } from '../fn/course/withdrawal-user';
import { WithdrawalUser$Params } from '../fn/course/withdrawal-user';

@Injectable({ providedIn: 'root' })
export class CourseService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `courses()` */
  static readonly CoursesPath = '/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `courses()` instead.
   *
   * This method doesn't expect any request body.
   */
  courses$Response(params?: Courses$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCourseResponse>> {
    return courses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `courses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  courses(params?: Courses$Params, context?: HttpContext): Observable<PageResponseCourseResponse> {
    return this.courses$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCourseResponse>): PageResponseCourseResponse => r.body)
    );
  }

  /** Path part for operation `create1()` */
  static readonly Create1Path = '/courses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create1$Response(params: Create1$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseResponse>> {
    return create1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create1(params: Create1$Params, context?: HttpContext): Observable<CourseResponse> {
    return this.create1$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseResponse>): CourseResponse => r.body)
    );
  }

  /** Path part for operation `enrollUser()` */
  static readonly EnrollUserPath = '/courses/{course-id}/users/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `enrollUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  enrollUser$Response(params: EnrollUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return enrollUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `enrollUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  enrollUser(params: EnrollUser$Params, context?: HttpContext): Observable<void> {
    return this.enrollUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `withdrawalUser()` */
  static readonly WithdrawalUserPath = '/courses/{course-id}/users/{user-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `withdrawalUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  withdrawalUser$Response(params: WithdrawalUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return withdrawalUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `withdrawalUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  withdrawalUser(params: WithdrawalUser$Params, context?: HttpContext): Observable<void> {
    return this.withdrawalUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `course()` */
  static readonly CoursePath = '/courses/{course-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `course()` instead.
   *
   * This method doesn't expect any request body.
   */
  course$Response(params: Course$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseResponse>> {
    return course(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `course$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  course(params: Course$Params, context?: HttpContext): Observable<CourseResponse> {
    return this.course$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseResponse>): CourseResponse => r.body)
    );
  }

  /** Path part for operation `delete1()` */
  static readonly Delete1Path = '/courses/{course-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete1()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete1$Response(params: Delete1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete1(params: Delete1$Params, context?: HttpContext): Observable<void> {
    return this.delete1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `update1()` */
  static readonly Update1Path = '/courses/{course-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update1$Response(params: Update1$Params, context?: HttpContext): Observable<StrictHttpResponse<CourseResponse>> {
    return update1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update1(params: Update1$Params, context?: HttpContext): Observable<CourseResponse> {
    return this.update1$Response(params, context).pipe(
      map((r: StrictHttpResponse<CourseResponse>): CourseResponse => r.body)
    );
  }

  /** Path part for operation `usersByCourseId()` */
  static readonly UsersByCourseIdPath = '/courses/{course-id}/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersByCourseId()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersByCourseId$Response(params: UsersByCourseId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return usersByCourseId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersByCourseId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersByCourseId(params: UsersByCourseId$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.usersByCourseId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

}
