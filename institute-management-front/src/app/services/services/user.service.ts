/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { me } from '../fn/user/me';
import { Me$Params } from '../fn/user/me';
import { PageResponseUserResponse } from '../models/page-response-user-response';
import { search } from '../fn/user/search';
import { Search$Params } from '../fn/user/search';
import { updateAsAdmin } from '../fn/user/update-as-admin';
import { UpdateAsAdmin$Params } from '../fn/user/update-as-admin';
import { updateProfile } from '../fn/user/update-profile';
import { UpdateProfile$Params } from '../fn/user/update-profile';
import { UserResponse } from '../models/user-response';
import { users } from '../fn/user/users';
import { Users$Params } from '../fn/user/users';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `search()` */
  static readonly SearchPath = '/users/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `search()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  search$Response(params: Search$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserResponse>> {
    return search(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `search$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  search(params: Search$Params, context?: HttpContext): Observable<PageResponseUserResponse> {
    return this.search$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserResponse>): PageResponseUserResponse => r.body)
    );
  }

  /** Path part for operation `updateProfile()` */
  static readonly UpdateProfilePath = '/users/profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProfile$Response(params: UpdateProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return updateProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProfile(params: UpdateProfile$Params, context?: HttpContext): Observable<UserResponse> {
    return this.updateProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `updateAsAdmin()` */
  static readonly UpdateAsAdminPath = '/users/profile/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAsAdmin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAsAdmin$Response(params: UpdateAsAdmin$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return updateAsAdmin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAsAdmin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAsAdmin(params: UpdateAsAdmin$Params, context?: HttpContext): Observable<UserResponse> {
    return this.updateAsAdmin$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `users()` */
  static readonly UsersPath = '/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `users()` instead.
   *
   * This method doesn't expect any request body.
   */
  users$Response(params?: Users$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return users(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `users$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  users(params?: Users$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.users$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `me()` */
  static readonly MePath = '/users/me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `me()` instead.
   *
   * This method doesn't expect any request body.
   */
  me$Response(params?: Me$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return me(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `me$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  me(params?: Me$Params, context?: HttpContext): Observable<UserResponse> {
    return this.me$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

}
